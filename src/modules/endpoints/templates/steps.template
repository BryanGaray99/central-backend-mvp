import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
import { {{entityName}}Client, handleApiResponse, getLastResponse, getLastError, storeCreatedEntity } from '../hooks';
import { {{entityName}}Fixture } from '../../fixtures/{{section}}/{{entityLower}}.fixture';
import { isValid{{entityName}}, isValid{{entityName}}List, get{{entityName}}ValidationErrors } from '../../schemas/{{section}}/{{entityLower}}.schema';

// Given steps
Given('I have valid {{entityName}} data', function () {
  this.{{entityLower}}Data = {{entityName}}Fixture.create{{entityName}}Dto();
});

Given('I have invalid {{entityName}} data with missing {string}', function (field: string) {
  this.{{entityLower}}Data = {{entityName}}Fixture.create{{entityName}}Dto();
  delete this.{{entityLower}}Data[field];
});

Given('I have {{entityName}} data with invalid {string}', function (field: string) {
  this.{{entityLower}}Data = {{entityName}}Fixture.create{{entityName}}Dto();
  switch (field) {
    {{#each createFields}}
    {{#if validations}}
    case '{{name}}':
      this.{{../entityLower}}Data.{{name}} = {{{invalidValue}}};
      break;
    {{/if}}
    {{/each}}
  }
});

Given('I have invalid update data for {string}', function (field: string) {
  this.updateData = {{entityName}}Fixture.update{{entityName}}Dto();
  switch (field) {
    {{#each updateFields}}
    {{#if validations}}
    case '{{name}}':
      this.updateData.{{name}} = {{{invalidValue}}};
      break;
    {{/if}}
    {{/each}}
  }
});

Given('a {{entityName}} exists in the system', async function () {
  this.existing{{entityName}} = {{entityName}}Fixture.create{{entityName}}Dto();
  
  try {
    const response = await {{entityName}}Client.create{{entityName}}(this.existing{{entityName}});
    expect(response.status).toBe({{expectedStatusCode}});
    
    const {{entityLower}}Data = (response.data as any)?.data?.data || response.data;
    this.{{entityLower}}Id = {{entityLower}}Data.id;
    storeCreatedEntity('{{entityName}}', this.{{entityLower}}Id, response.data);
  } catch (error: any) {
    console.log(`❌ Error creating {{entityName}}:`, error.status || 'Unknown error');
    throw error;
  }
});

Given('multiple {{entityNamePlural}} exist in the system', async function () {
  this.created{{entityNamePlural}} = [];
  
  for (let i = 0; i < 3; i++) {
    const {{entityLower}}Data = {{entityName}}Fixture.create{{entityName}}Dto();
    
    try {
      const response = await {{entityName}}Client.create{{entityName}}({{entityLower}}Data);
      expect(response.status).toBe({{expectedStatusCode}});
      
      const {{entityLower}}DataResponse = (response.data as any)?.data?.data || response.data;
      this.created{{entityNamePlural}}.push({{entityLower}}DataResponse);
      storeCreatedEntity('{{entityName}}', {{entityLower}}DataResponse.id, response.data);
    } catch (error: any) {
      console.log(`❌ Error creating {{entityName}} ${i}:`, error.status || 'Unknown error');
      throw error;
    }
  }
});

// When steps
{{#each methods}}
{{#if (eq method "POST")}}
When('I create a {{../entityName}}', async function () {
  try {
    const response = await {{../entityName}}Client.create{{../entityName}}(this.{{../entityLower}}Data);
    handleApiResponse(response);
    
    if (response.status === {{expectedStatusCode}} && response.data) {
      const {{../entityLower}}Data = (response.data as any)?.data?.data || response.data;
      if ({{../entityLower}}Data?.id) {
        this.{{../entityLower}}Id = {{../entityLower}}Data.id;
        storeCreatedEntity('{{../entityName}}', {{../entityLower}}Data.id, response.data);
      }
    }
  } catch (error: any) {
    console.log(`❌ Error creating {{../entityName}}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});
{{/if}}

{{#if (eq method "GET")}}
{{#if (eq ../endpointPath (concat "/" ../entityNamePlural))}}
When('I get all {{../entityNamePlural}}', async function () {
  try {
    const response = await {{../entityName}}Client.getAll{{../entityNamePlural}}();
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error getting all {{../entityNamePlural}}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});
{{else}}
When('I get the {{../entityName}} by ID', async function () {
  try {
    const response = await {{../entityName}}Client.get{{../entityName}}ById(this.{{../entityLower}}Id);
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error getting {{../entityName}} by ID:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});

When('I get a {{../entityName}} with ID {string}', async function ({{../entityLower}}Id: string) {
  try {
    const response = await {{../entityName}}Client.get{{../entityName}}ById({{../entityLower}}Id);
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error getting {{../entityName}} with ID ${ {{../entityLower}}Id}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});
{{/if}}
{{/if}}

{{#if (eq method "PATCH")}}
When('I update the {{../entityName}}', async function () {
  this.updateData = {{../entityName}}Fixture.update{{../entityName}}Dto();
  
  try {
    const response = await {{../entityName}}Client.update{{../entityName}}(this.{{../entityLower}}Id, this.updateData);
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error updating {{../entityName}}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});
{{/if}}

{{#if (eq method "PUT")}}
When('I replace the {{../entityName}}', async function () {
  this.replaceData = {{../entityName}}Fixture.create{{../entityName}}Dto();
  
  try {
    const response = await {{../entityName}}Client.replace{{../entityName}}(this.{{../entityLower}}Id, this.replaceData);
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error replacing {{../entityName}}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});
{{/if}}

{{#if (eq method "DELETE")}}
When('I delete the {{../entityName}}', async function () {
  try {
    const response = await {{../entityName}}Client.delete{{../entityName}}(this.{{../entityLower}}Id);
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error deleting {{../entityName}}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});

When('I delete a {{../entityName}} with ID {string}', async function ({{../entityLower}}Id: string) {
  try {
    const response = await {{../entityName}}Client.delete{{../entityName}}({{../entityLower}}Id);
    handleApiResponse(response);
  } catch (error: any) {
    console.log(`❌ Error deleting {{../entityName}} with ID ${ {{../entityLower}}Id}:`, error.status || 'Unknown error');
    handleApiResponse(null, error);
  }
});
{{/if}}
{{/each}}

// Then steps
{{#each methods}}
{{#if (eq method "POST")}}
Then('the {{../entityName}} should be created successfully', function () {
  const response = getLastResponse();
  const error = getLastError();

  if (error) {
    console.log(`❌ {{../entityName}} creation failed:`, error);
  }

  expect(response).toBeTruthy();
  expect(response.status).toBe({{expectedStatusCode}});
  expect(response.data).toBeTruthy();
  
  const {{../entityLower}}Data = (response.data as any)?.data?.data || response.data;
  expect({{../entityLower}}Data.id).toBeTruthy();
  
  // Validate response schema
  expect(isValid{{../entityName}}({{../entityLower}}Data)).toBe(true);
});
{{/if}}

{{#if (eq method "GET")}}
{{#if (eq ../endpointPath (concat "/" ../entityNamePlural))}}
Then('I should get a list of {{../entityNamePlural}}', function () {
  const response = getLastResponse();
  const error = getLastError();

  if (error) {
    console.log(`❌ Getting {{../entityNamePlural}} failed:`, error);
  }

  expect(response).toBeTruthy();
  expect(response.status).toBe({{expectedStatusCode}});
  const {{../entityNamePlural}}Data = (response.data as any)?.data?.data || response.data;
  expect(Array.isArray({{../entityNamePlural}}Data)).toBe(true);
  
  // Validate response schema
  expect(isValid{{../entityName}}List({{../entityNamePlural}}Data)).toBe(true);
});

Then('each {{../entityName}} should have required fields', function () {
  const response = getLastResponse();
  const error = getLastError();
  
  if (error) {
    console.log(`❌ {{../entityName}} fields validation failed:`, error);
  }

  expect(response).toBeTruthy();
  const {{../entityNamePlural}}Data = (response.data as any)?.data?.data || response.data;
  expect(Array.isArray({{../entityNamePlural}}Data)).toBe(true);
  
  {{../entityNamePlural}}Data.forEach(({{../entityLower}}: any) => {
    {{#each ../fields}}
    {{#if required}}
    expect({{../entityLower}}.{{name}}).toBeTruthy();
    {{/if}}
    {{/each}}
  });
});
{{else}}
Then('I should get the {{../entityName}} details', function () {
  const response = getLastResponse();
  const error = getLastError();
  
  if (error) {
    console.log(`❌ Error getting {{../entityName}} details:`, error);
  }
  
  expect(response).toBeTruthy();
  expect(response.status).toBe({{expectedStatusCode}});
  expect(response.data).toBeTruthy();
  const {{../entityLower}}Data = (response.data as any)?.data?.data || response.data;
  expect({{../entityLower}}Data.id).toBe(this.{{../entityLower}}Id);
  
  // Validate response schema
  expect(isValid{{../entityName}}({{../entityLower}}Data)).toBe(true);
});
{{/if}}
{{/if}}

{{#if (eq method "PATCH")}}
Then('the {{../entityName}} should be updated successfully', function () {
  const response = getLastResponse();
  const error = getLastError();

  if (error) {
    console.log(`❌ Update failed:`, error);
  }

  expect(response).toBeTruthy();
  expect(response.status).toBe({{expectedStatusCode}});
  expect(response.data).toBeTruthy();

  const {{../entityLower}}Data = (response.data as any)?.data?.data || response.data;
  Object.keys(this.updateData).forEach(key => {
    let expected = this.updateData[key];
    let actual = {{../entityLower}}Data[key];
    if ([{{#each ../updateFields}}{{#if (eq type "number")}}'{{name}}'{{#unless @last}}, {{/unless}}{{/if}}{{/each}}].includes(key)) {
      expected = Number(expected);
      actual = Number(actual);
    }
    expect(actual).toBe(expected);
  });

  // Validate response schema
  expect(isValid{{../entityName}}({{../entityLower}}Data)).toBe(true);
});
{{/if}}

{{#if (eq method "PUT")}}
Then('the {{../entityName}} should be replaced successfully', function () {
  const response = getLastResponse();
  const error = getLastError();

  if (error) {
    console.log(`❌ Replace failed:`, error);
  }

  expect(response).toBeTruthy();
  expect(response.status).toBe({{expectedStatusCode}});
  expect(response.data).toBeTruthy();

  const {{../entityLower}}Data = (response.data as any)?.data?.data || response.data;
  expect({{../entityLower}}Data.id).toBe(this.{{../entityLower}}Id);
  
  // Validate response schema
  expect(isValid{{../entityName}}({{../entityLower}}Data)).toBe(true);
});
  {{/if}}

{{#if (eq method "DELETE")}}
Then('the {{../entityName}} should be deleted successfully', function () {
  const response = getLastResponse();
  const error = getLastError();
  
  if (error) {
    console.log(`❌ Delete failed:`, error);
  }
  
  expect(response).toBeTruthy();
  expect(response.status).toBe({{expectedStatusCode}});
});
{{/if}}
{{/each}}

// Common validation steps
Then('the response should contain valid {{entityName}} data', function () {
  const response = getLastResponse();
  const error = getLastError();

  if (error) {
    console.log(`❌ {{entityName}} validation failed:`, error);
  }

  expect(response).toBeTruthy();
  expect(response.data).toBeTruthy();
  const {{entityLower}}Data = (response.data as any)?.data?.data || response.data;
  
  // Validate response schema
  expect(isValid{{entityName}}({{entityLower}}Data)).toBe(true);
  
  if (!isValid{{entityName}}({{entityLower}}Data)) {
    const errors = get{{entityName}}ValidationErrors({{entityLower}}Data);
    throw new Error(`Invalid {{entityName}} data: ${errors.join(', ')}`);
  }
});

Then('I should receive a {int} status code', function (statusCode: number) {
  const response = getLastResponse();
  const error = getLastError();
  
  if (error) {
    console.log(`❌ Status code validation failed:`, error);
  }
  
  expect(response).toBeTruthy();
  expect(response.status).toBe(statusCode);
});

Then('I should receive a validation error', function () {
  const error = getLastError();
  expect(error).toBeTruthy();
  expect(error.status).toBeGreaterThanOrEqual(400);
  expect(error.status).toBeLessThan(500);
});

Then('I should receive a not found error', function () {
  const error = getLastError();
  expect(error).toBeTruthy();
  expect(error.status).toBe(404);
}); 